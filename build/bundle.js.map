{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../components/Nav.svelte","../../node_modules/@firebase/util/dist/index.esm2017.js","../../node_modules/@firebase/component/dist/esm/index.esm2017.js","../../node_modules/@firebase/logger/dist/esm/index.esm2017.js","../../node_modules/idb/build/wrap-idb-value.js","../../node_modules/idb/build/index.js","../../node_modules/@firebase/app/dist/esm/index.esm2017.js","../../node_modules/firebase/app/dist/esm/index.esm.js","../../node_modules/@firebase/database/dist/index.esm2017.js","../../src/utils/firebase.js","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\nfunction split_css_unit(value) {\n    const split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];\n}\nconst contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\n/**\n * Resize observer singleton.\n * One listener per element only!\n * https://groups.google.com/a/chromium.org/g/blink-dev/c/z6ienONUb5A/m/F5-VcUZtBAAJ\n */\nclass ResizeObserverSingleton {\n    constructor(options) {\n        this.options = options;\n        this._listeners = 'WeakMap' in globals ? new WeakMap() : undefined;\n    }\n    observe(element, listener) {\n        this._listeners.set(element, listener);\n        this._getObserver().observe(element, this.options);\n        return () => {\n            this._listeners.delete(element);\n            this._observer.unobserve(element); // this line can probably be removed\n        };\n    }\n    _getObserver() {\n        var _a;\n        return (_a = this._observer) !== null && _a !== void 0 ? _a : (this._observer = new ResizeObserver((entries) => {\n            var _a;\n            for (const entry of entries) {\n                ResizeObserverSingleton.entries.set(entry.target, entry);\n                (_a = this._listeners.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\n            }\n        }));\n    }\n}\n// Needs to be written like this to pass the tree-shake-test\nResizeObserverSingleton.entries = 'WeakMap' in globals ? new WeakMap() : undefined;\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction comment(content) {\n    return document.createComment(content);\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_immediate_propagation(fn) {\n    return function (event) {\n        event.stopImmediatePropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set && always_set_through_set_attribute.indexOf(key) === -1) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction set_dynamic_element_data(tag) {\n    return (/-/.test(tag)) ? set_custom_element_data_map : set_attributes;\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction init_binding_group(group) {\n    let _inputs;\n    return {\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            _inputs.forEach(input => group.push(input));\n        },\n        /* remove */ r() {\n            _inputs.forEach(input => group.splice(group.indexOf(input), 1));\n        }\n    };\n}\nfunction init_binding_group_dynamic(group, indexes) {\n    let _group = get_binding_group(group);\n    let _inputs;\n    function get_binding_group(group) {\n        for (let i = 0; i < indexes.length; i++) {\n            group = group[indexes[i]] = group[indexes[i]] || [];\n        }\n        return group;\n    }\n    function push() {\n        _inputs.forEach(input => _group.push(input));\n    }\n    function remove() {\n        _inputs.forEach(input => _group.splice(_group.indexOf(input), 1));\n    }\n    return {\n        /* update */ u(new_indexes) {\n            indexes = new_indexes;\n            const new_group = get_binding_group(group);\n            if (new_group !== _group) {\n                remove();\n                _group = new_group;\n                push();\n            }\n        },\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            push();\n        },\n        /* remove */ r: remove\n    };\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction claim_comment(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 8, (node) => {\n        node.data = '' + data;\n        return undefined;\n    }, () => comment(data), true);\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    text.data = data;\n}\nfunction set_data_contenteditable(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable(text, data);\n    }\n    else {\n        set_data(text, data);\n    }\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value == null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value, mounting) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    if (!mounting || value !== undefined) {\n        select.selectedIndex = -1; // no option should be selected\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked');\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_iframe_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n            // see https://github.com/sveltejs/svelte/issues/4233\n            fn();\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nconst resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'content-box' });\nconst resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'border-box' });\nconst resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'device-pixel-content-box' });\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            /** #7364  target for <template> may be provided as #document-fragment(11) */\n            else\n                this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));\n            this.t = target.tagName !== 'TEMPLATE' ? target : target.content;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nlet render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n */\nfunction flush_render_callbacks(fns) {\n    const filtered = [];\n    const targets = [];\n    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));\n    targets.forEach((c) => c());\n    render_callbacks = filtered;\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    const updates = [];\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            // defer updates until all the DOM shuffling is done\n            updates.push(() => block.p(child_ctx, dirty));\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    run_all(updates);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\nconst _boolean_attributes = [\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n];\n/**\n * List of HTML boolean attributes (e.g. `<input disabled>`).\n * Source: https://html.spec.whatwg.org/multipage/indices.html\n */\nconst boolean_attributes = new Set([..._boolean_attributes]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        flush_render_callbacks($$.after_update);\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    if (has_stop_immediate_propagation)\n        modifiers.push('stopImmediatePropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_contenteditable_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable_dev(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable_dev(text, data);\n    }\n    else {\n        set_data_dev(text, data);\n    }\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, ResizeObserverSingleton, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_iframe_resize_listener, add_location, add_render_callback, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_comment, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, comment, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, contenteditable_truthy_values, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, flush_render_callbacks, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, init_binding_group, init_binding_group_dynamic, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, resize_observer_border_box, resize_observer_content_box, resize_observer_device_pixel_content_box, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_contenteditable, set_data_contenteditable_dev, set_data_dev, set_data_maybe_contenteditable, set_data_maybe_contenteditable_dev, set_dynamic_element_data, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, split_css_unit, spread, src_url_equal, start_hydrating, stop_immediate_propagation, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","<!-- src/components/Nav.svelte -->\n\n<script>\n    // Import necessary Svelte modules\n    import { onMount } from 'svelte';\n  </script>\n  \n  <style>\n    /* Add your styling here */\n    nav {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 10px;\n      background-color: #333;\n      color: rgb(255, 255, 255);\n    }\n  \n    .brand {\n      font-size: 1.5em;\n      font-weight: bold;\n      color: #ffffff;\n    }\n  \n    .nav-link {\n      color: #fff;\n      text-decoration: none;\n      margin-right: 10px;\n    }\n  </style>\n  \n  <!-- HTML template for the Nav component -->\n  <nav>\n    <!-- Brand/Logo on the left -->\n    <div class=\"brand\"> Brand</div>\n  \n    <!-- Navigation Link on the right -->\n    <a href=\"/\" class=\"nav-link\">Home</a>\n  </nav>\n  ","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw new DecodeBase64StringError();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * An error encountered while decoding base64 string.\r\n */\r\nclass DecodeBase64StringError extends Error {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = 'DecodeBase64StringError';\r\n    }\r\n}\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n * @public\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;\r\n/**\r\n * Attempt to read defaults from a JSON string provided to\r\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\r\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\r\n * The dots are in parens because certain compilers (Vite?) cannot\r\n * handle seeing that variable in comments.\r\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\r\n */\r\nconst getDefaultsFromEnvVariable = () => {\r\n    if (typeof process === 'undefined' || typeof process.env === 'undefined') {\r\n        return;\r\n    }\r\n    const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\r\n    if (defaultsJsonString) {\r\n        return JSON.parse(defaultsJsonString);\r\n    }\r\n};\r\nconst getDefaultsFromCookie = () => {\r\n    if (typeof document === 'undefined') {\r\n        return;\r\n    }\r\n    let match;\r\n    try {\r\n        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\r\n    }\r\n    catch (e) {\r\n        // Some environments such as Angular Universal SSR have a\r\n        // `document` object but error on accessing `document.cookie`.\r\n        return;\r\n    }\r\n    const decoded = match && base64Decode(match[1]);\r\n    return decoded && JSON.parse(decoded);\r\n};\r\n/**\r\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\r\n * (1) if such an object exists as a property of `globalThis`\r\n * (2) if such an object was provided on a shell environment variable\r\n * (3) if such an object exists in a cookie\r\n * @public\r\n */\r\nconst getDefaults = () => {\r\n    try {\r\n        return (getDefaultsFromGlobal() ||\r\n            getDefaultsFromEnvVariable() ||\r\n            getDefaultsFromCookie());\r\n    }\r\n    catch (e) {\r\n        /**\r\n         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\r\n         * to any environment case we have not accounted for. Log to\r\n         * info instead of swallowing so we can find these unknown cases\r\n         * and add paths for them if needed.\r\n         */\r\n        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\r\n        return;\r\n    }\r\n};\r\n/**\r\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHost = (productName) => { var _a, _b; return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName]; };\r\n/**\r\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHostnameAndPort = (productName) => {\r\n    const host = getDefaultEmulatorHost(productName);\r\n    if (!host) {\r\n        return undefined;\r\n    }\r\n    const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\r\n    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\r\n        throw new Error(`Invalid host ${host} with no separate hostname and port!`);\r\n    }\r\n    // eslint-disable-next-line no-restricted-globals\r\n    const port = parseInt(host.substring(separatorIndex + 1), 10);\r\n    if (host[0] === '[') {\r\n        // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\r\n        return [host.substring(1, separatorIndex - 1), port];\r\n    }\r\n    else {\r\n        return [host.substring(0, separatorIndex), port];\r\n    }\r\n};\r\n/**\r\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\r\n * @public\r\n */\r\nconst getDefaultAppConfig = () => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config; };\r\n/**\r\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\r\n * prefixed by \"_\")\r\n * @public\r\n */\r\nconst getExperimentalSetting = (name) => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name}`]; };\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected or specified.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    var _a;\r\n    const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;\r\n    if (forceEnvironment === 'node') {\r\n        return true;\r\n    }\r\n    else if (forceEnvironment === 'browser') {\r\n        return false;\r\n    }\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        !!navigator.userAgent &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    try {\r\n        return typeof indexedDB === 'object';\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\r\n * @internal\r\n */\r\nfunction promiseWithTimeout(promise, timeInMS = 2000) {\r\n    const deferredPromise = new Deferred();\r\n    setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\r\n    promise.then(deferredPromise.resolve, deferredPromise.reject);\r\n    return deferredPromise.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n * Generates a new uuid.\r\n * @public\r\n */\r\nconst uuidv4 = function () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\r\n        const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, DecodeBase64StringError, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getDefaultAppConfig, getDefaultEmulatorHost, getDefaultEmulatorHostnameAndPort, getDefaults, getExperimentalSetting, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, promiseWithTimeout, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, uuidv4, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* InstantiationMode.LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* InstantiationMode.EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* InstantiationMode.EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, getDefaultAppConfig, deepEqual, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* ComponentType.VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.9.27\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"10.8.0\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* AppError.NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call initializeApp() first',\r\n    [\"bad-app-name\" /* AppError.BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* AppError.DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* AppError.APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"no-options\" /* AppError.NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',\r\n    [\"invalid-app-argument\" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"idb-open\" /* AppError.IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-get\" /* AppError.IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-set\" /* AppError.IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-delete\" /* AppError.IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* ComponentType.PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* AppError.APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(_options, rawConfig = {}) {\r\n    let options = _options;\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* AppError.BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    options || (options = getDefaultAppConfig());\r\n    if (!options) {\r\n        throw ERROR_FACTORY.create(\"no-options\" /* AppError.NO_OPTIONS */);\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* AppError.DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\r\n        return initializeApp();\r\n    }\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* AppError.NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* ComponentType.VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        try {\r\n                            db.createObjectStore(STORE_NAME);\r\n                        }\r\n                        catch (e) {\r\n                            // Safari/iOS browsers throw occasional exceptions on\r\n                            // db.createObjectStore() that may be a bug. Avoid blocking\r\n                            // the rest of the app functionality.\r\n                            console.warn(e);\r\n                        }\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"idb-open\" /* AppError.IDB_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME);\r\n        const result = await tx.objectStore(STORE_NAME).get(computeKey(app));\r\n        // We already have the value but tx.done can throw,\r\n        // so we need to await it here to catch errors\r\n        await tx.done;\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-get\" /* AppError.IDB_GET */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        await tx.done;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-set\" /* AppError.IDB_WRITE */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        var _a, _b;\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n            // If we failed to construct a heartbeats cache, then return immediately.\r\n            if (((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null) {\r\n                return;\r\n            }\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        var _a;\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            if (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) {\r\n                return idbHeartbeatObject;\r\n            }\r\n            else {\r\n                return { heartbeats: [] };\r\n            }\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"10.8.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n","import { _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component, ComponentContainer, Provider } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"1.0.3\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\r\n    if (typeof timeout === 'number' &&\r\n        // @ts-ignore Is only defined in Deno environments.\r\n        typeof Deno !== 'undefined' &&\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno['unrefTimer']) {\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno.unrefTimer(timeout);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    }\r\n    else if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this.isUsingEmulator = isUsingEmulator;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\r\n            this.myIFrame.doc.body.textContent = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        if (applicationId) {\r\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            let options;\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n            }\r\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\r\n    static get IS_TRANSPORT_INITIALIZED() {\r\n        return this.globalTransportInitialized_;\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n            TransportManager.globalTransportInitialized_ = true;\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Keeps track of whether the TransportManager has already chosen a transport to use\r\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* RealtimeState.CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                const handshakePayload = Object.assign({}, payload);\r\n                if (this.repoInfo_.isUsingEmulator) {\r\n                    // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\r\n                    handshakePayload.h = this.repoInfo_.host;\r\n                }\r\n                this.onHandshake_(handshakePayload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* RealtimeState.CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* RealtimeState.DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* ChangeType.VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* ChangeType.CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* ChangeType.CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* ChangeType.CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* ChangeType.CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        const isWithinStart = this.startIsInclusive_\r\n            ? this.index_.compare(this.getStartPost(), node) <= 0\r\n            : this.index_.compare(this.getStartPost(), node) < 0;\r\n        const isWithinEnd = this.endIsInclusive_\r\n            ? this.index_.compare(node, this.getEndPost()) <= 0\r\n            : this.index_.compare(node, this.getEndPost()) < 0;\r\n        return isWithinStart && isWithinEnd;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.withinDirectionalStart = (node) => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\r\n        this.withinDirectionalEnd = (node) => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\r\n        this.withinStartPost = (node) => {\r\n            const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\r\n            return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.withinEndPost = (node) => {\r\n            const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\r\n            return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    if (!this.withinDirectionalStart(next)) {\r\n                        // if we have not reached the start, skip to the next element\r\n                        continue;\r\n                    }\r\n                    else if (!this.withinDirectionalEnd(next)) {\r\n                        // if we have reached the end, stop adding elements\r\n                        break;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    const inRange = count < this.limit_ &&\r\n                        this.withinDirectionalStart(next) &&\r\n                        this.withinDirectionalEnd(next);\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false; // can only be true if startSet_ is true\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false; // can only be true if endSet_ is true\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.startAfterSet_ = this.startAfterSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.endBeforeSet_ = this.endBeforeSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* REST_QUERY_CONSTANTS.KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        const startParam = queryParams.startAfterSet_\r\n            ? \"startAfter\" /* REST_QUERY_CONSTANTS.START_AFTER */\r\n            : \"startAt\" /* REST_QUERY_CONSTANTS.START_AT */;\r\n        qs[startParam] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[startParam] += ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        const endParam = queryParams.endBeforeSet_\r\n            ? \"endBefore\" /* REST_QUERY_CONSTANTS.END_BEFORE */\r\n            : \"endAt\" /* REST_QUERY_CONSTANTS.END_AT */;\r\n        qs[endParam] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[endParam] += ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n        obj[\"sin\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] =\r\n            !queryParams.startAfterSet_;\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n        obj[\"ein\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] =\r\n            !queryParams.endBeforeSet_;\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* ChangeType.CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* ChangeType.CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* ChangeType.CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === null;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\r\n *  deduping needs to take place. This flag allows toggling of that behavior\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        if (!skipListenerDedup) {\r\n            /**\r\n             * We may have just removed one of many listeners and can short-circuit this whole process\r\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n             * properly set up.\r\n             */\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            const removingDefault = -1 !==\r\n                removed.findIndex(query => {\r\n                    return query._queryParams.loadsAllData();\r\n                });\r\n            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n            if (removingDefault && !covered) {\r\n                const subtree = syncTree.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (let i = 0; i < newViews.length; ++i) {\r\n                        const view = newViews[i], newQuery = view.query;\r\n                        const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                        syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                // Otherwise there's nothing below us, so nothing we need to start listening on\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    const defaultTag = null;\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach((queryToRemove) => {\r\n                        const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query, eventRegistration) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        /**\r\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n         * Add an event registration,\r\n         * Update data at the path,\r\n         * Raise any events,\r\n         * Cleanup the SyncTree\r\n         */\r\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\r\n        let events;\r\n        if (query._queryParams.loadsAllData()) {\r\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        }\r\n        else {\r\n            const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\r\n        }\r\n        /*\r\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n         * ensure the corresponding child events will get fired.\r\n         */\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\r\n        return node;\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* TransactionStatus.RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* TransactionStatus.RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* TransactionStatus.SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* TransactionStatus.RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* TransactionStatus.RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* TransactionStatus.RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `IteratedDataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    const callbackContext = new CallbackContext(() => { });\r\n    const container = new ValueEventRegistration(callbackContext);\r\n    return repoGetValue(query._repo, query, container).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'endAt';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'endBefore';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'startAt';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'startAfter';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n        this.type = 'limitToFirst';\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n        this.type = 'limitToLast';\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n        this.type = 'orderByChild';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'orderByKey';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'orderByPriority';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'orderByValue';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'equalTo';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, \r\n    /*isUsingEmulator=*/ true);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nfunction forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nfunction forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    const db = _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n    if (!db._instanceStarted) {\r\n        const emulator = getDefaultEmulatorHostnameAndPort('database');\r\n        if (emulator) {\r\n            connectDatabaseEmulator(db, ...emulator);\r\n        }\r\n    }\r\n    return db;\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n * @internal\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAppCheckImpl - custom app check implementation\r\n * @param customAuthImpl - custom auth implementation\r\n */\r\nfunction _initStandalone({ app, url, version, customAuthImpl, customAppCheckImpl, nodeAdmin = false }) {\r\n    setSDKVersion(version);\r\n    /**\r\n     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n     * any actual function.\r\n     */\r\n    const componentContainer = new ComponentContainer('database-standalone');\r\n    const authProvider = new Provider('auth-internal', componentContainer);\r\n    let appCheckProvider;\r\n    if (customAppCheckImpl) {\r\n        appCheckProvider = new Provider('app-check-internal', componentContainer);\r\n        appCheckProvider.setComponent(new Component('app-check-internal', () => customAppCheckImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    }\r\n    authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin);\r\n}\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, _initStandalone, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","// src/utils/firebase.js\nimport { initializeApp } from 'firebase/app';\nimport { getDatabase } from 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCauN-vsgUfQJXc5b41NoCnYzi6FIn86MQ\",\n    authDomain: \"linkshare-eb70b.firebaseapp.com\",\n    databaseURL: \"https://linkshare-eb70b-default-rtdb.firebaseio.com\",\n    projectId: \"linkshare-eb70b\",\n    storageBucket: \"linkshare-eb70b.appspot.com\",\n    messagingSenderId: \"284502085616\",\n    appId: \"1:284502085616:web:3f24e3fb844320eef85735\",\n    measurementId: \"G-VQ0J98LXYT\"\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\nconst database = getDatabase(firebaseApp);\n\nexport { database };\n\n","<!-- src/App.svelte -->\n\n<script>\n\timport { onMount } from 'svelte';\n\timport Nav from '../components/Nav.svelte';\n\timport { database } from './utils/firebase';\n\timport { ref, onValue } from 'firebase/database';\n  \n\tlet snips = [];  // Declare snips here\n  \n\tonMount(() => {\n\t  const snipsRef = ref(database, \"snips\");\n  \n\t  // Listen for changes in the \"snips\" node\n\t  onValue(snipsRef, (snapshot) => {\n\t\tconst snipsArray = [];\n\t\tsnapshot.forEach((childSnapshot) => {\n\t\t  const snipKey = childSnapshot.key;\n\t\t  const snipData = childSnapshot.val();\n\t\t  snipsArray.push({ id: snipKey, ...snipData });\n\t\t});\n\t\tsnips = snipsArray;\n\t  });\n\t});\n  </script>\n  \n  <style>\n\t.container {\n\t  padding-top: 50px;\n\t  align-items: center;\n\t  text-align: center;\n\t  max-width: 600;\n\t  margin: auto;\n\t}\n  \n\t.snip-container {\n\t  margin-bottom: 10px;\n\t}\n  \n\t.copy-input {\n\t  width: 200px;\n\t}\n  </style>\n  \n  <!-- HTML template for the App page -->\n  <div>\n\t<!-- Include the Nav component -->\n\t<Nav />\n  \n\t<!-- The rest of your page content goes here -->\n\t<div class=\"container\">\n\t  <h1>Hello</h1>\n  \n\t  <!-- Display snips from Firebase -->\n\t  {#each snips as { id, name, content }}\n\t\t<div class=\"snip-container\">\n\t\t  <!-- Create label for name -->\n\t\t  <a href={`edit.html?id=${id}`}>{name}</a>\n  \n\t\t  <!-- Create input for content with initial value -->\n\t\t  <input bind:value={content} class=\"copy-input\" />\n\t\t  <button>Copy</button>\n\t\t</div>\n\t  {/each}\n\t</div>\n  </div>\n  ","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tname: 'world'\n\t}\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_input_value","input","current_component","set_current_component","component","onMount","Error","get_current_component","$$","on_mount","push","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","length","update","e","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","transition_in","block","local","delete","mount_component","customElement","m","new_on_destroy","map","filter","on_destroy","destroy_component","detaching","filtered","targets","c","indexOf","flush_render_callbacks","d","make_dirty","then","fill","init","options","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","splice","$set","$$props","obj","$$set","keys","nav","CONSTANTS","assert","assertion","message","assertionError","stringToByteArray$1","str","out","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","DecodeBase64StringError","constructor","super","arguments","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","console","error","deepCopy","deepExtend","undefined","source","Date","getTime","prop","hasOwnProperty","getDefaultsFromGlobal","self","window","global","getGlobal","__FIREBASE_DEFAULTS__","getDefaults","process","env","defaultsJsonString","JSON","parse","getDefaultsFromEnvVariable","match","cookie","decoded","getDefaultsFromCookie","info","getDefaultEmulatorHostnameAndPort","productName","host","_a","_b","emulatorHosts","getDefaultEmulatorHost","separatorIndex","lastIndexOf","port","parseInt","substring","getDefaultAppConfig","config","Deferred","reject","promise","wrapCallback","catch","isMobileCordova","test","navigator","isNodeSdk","FirebaseError","code","customData","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","service","serviceName","errors","fullCode","template","PATTERN","_","key","replaceTemplate","fullMessage","jsonEval","stringify","decode","token","header","claims","signature","parts","split","contains","call","safeGet","isEmpty","contextObj","res","deepEqual","aKeys","bKeys","k","includes","aProp","bProp","isObject","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","lengthMinusBlock","n","inbuf","digest","totalBits","j","errorPrefix","fnName","argName","stringLength","getModularInstance","_delegate","Component","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","container","instances","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","deferred","set","isInitialized","shouldAutoInitialize","getOrInitializeService","instanceIdentifier","getImmediate","optional","getComponent","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","services","values","all","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","existingInstance","invokeOnInitCallbacks","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","debug","DEBUG","verbose","VERBOSE","INFO","warn","WARN","ERROR","silent","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","now","toISOString","method","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","log","instanceOfAny","object","constructors","some","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","receiver","IDBTransaction","objectStoreNames","objectStore","wrap","wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","apply","unwrap","storeNames","tx","sort","transformCachableValue","done","unlisten","removeEventListener","complete","DOMException","addEventListener","cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","Proxy","IDBRequest","request","success","result","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","async","storeName","store","shift","oldTraps","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","version","logString","name$o","version$1","logger","PLATFORM_LOG_STRING","firebase","_apps","_components","_addComponent","app","_registerComponent","componentName","ERROR_FACTORY","FirebaseAppImpl","_isDeleted","_options","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","initializeApp","rawConfig","existingApp","newApp","registerVersion","libraryKeyOrName","variant","libraryMismatch","versionMismatch","warning","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","originalErrorMessage","writeHeartbeatsToIndexedDB","heartbeatObject","put","computeKey","idbGetError","appId","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","triggerHeartbeat","agent","date","getUTCDateString","heartbeats","lastSentHeartbeatDate","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","getHeartbeatsHeader","heartbeatsToSend","unsentEntries","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","extractHeartbeatsForHeader","headerString","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","isIndexedDBAvailable","preExist","DB_CHECK_NAME","onsuccess","close","deleteDatabase","onupgradeneeded","onerror","idbHeartbeatObject","readHeartbeatsFromIndexedDB","heartbeatsObject","existingHeartbeatsObject","SDK_VERSION","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","high","stringToByteArray","sha1Bytes","buildLogMessage_","varArgs","arg","firstLog_","logger_","persistent","bind","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","bias","s","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","substr","toLowerCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","FORGE_DOMAIN_RE","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","params","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called","wrappedFn","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","href","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","send","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","newScript","onload","onreadystatechange","rstate","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","mySock","onopen","onclose","onmessage","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","handshakePayload","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","on","validateEventType_","eventData","getInitialEvent","off","et","OnlineMonitor","online_","getInstance","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","outstandingGet","_path","q","_queryObject","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","NamedNode","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","left","right","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setMaxNode","USE_HINZE","nodeFromJSON","json","childData","childrenHavePriority","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","getListenId_","listenId","thisListen","queryStringParameters","restRequest_","querystringParams","arrayVal","encodeURIComponent","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","sparseSnapshotTreeForEachTree","prefixPath","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","EmptyChildren","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewIsEmpty","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointAddEventRegistration","serverCacheComplete","eventCacheComplete","syncPointGetView","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","record","writeTreeGetWrite","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","_key","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","syncTreeRemoveTags_","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","queryKey","queriesToStop","childQueries","queryToStop","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","viewGetServerCache","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","validateFirebaseData","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validatePathString","argumentName","validateRootPathString","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","repoServerTime","repoGenerateServerValues","taggedChildren","raw","changeTree","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoGetAncestorTransactionNode","transactionNode","treeForEachAncestor","repoAbortTransactionsOnNode","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoRemoveEventCallbackForQuery","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","pathToUrlEncodedString","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","ValueEventRegistration","callbackContext","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","repoAddEventCallbackForQuery","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","appRepos","repoManagerCreateRepo","Database","repoManagerDeleteRepo","repoInterrupt","_repoInternal","_instanceStarted","_root","_rootInternal","_checkNotDeleted","apiName","simpleListen","echo","onEcho","setSDKVersion","registerDatabase","database","getApp","heartbeatController","_getProvider","emulator","tokenProvider","mockUserToken","uid","project","iat","sub","user_id","iss","aud","exp","auth_time","sign_in_provider","identities","alg","createMockUserToken","repoManagerApplyEmulatorSettings","connectDatabaseEmulator","getDatabase","apiKey","authDomain","storageBucket","messagingSenderId","measurementId","handler","div","button","set_data","t0","t0_value","div1","div0","h1","o","iterations","snips","snipsArray","childSnapshot","snipKey","snipData","$$invalidate"],"mappings":"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","x_google_ignoreList":[0,2,3,4,5,6,7,8,9]}